from sympy import symbols, Eq, simplify, Function, Add

from libcellml import Parser, Printer, Validator, cellmlElementTypeAsString

# Importing internal packages
from utilities import print_model
import cellml


def equation_builder( components ):

    variables = []      # This list contains the variables of cellml file [In CellML file]

    coefficients = []       # The difference between variables and coefficients is identified by the first part of their id which is like "va_12345_r1", first part indicates that this parameter is a variable

    reaction_rates = []      # This list contains all the rate variables for all equations that are in the model

    reaction_rate_constants = []     # This list contains the rate constants that are in the model
    
    for component in components:

        number_of_variables = component.variableCount()

        for v in range( 0, number_of_variables ):

            id = component.variable(v).id()

            identifier = id.split('_')[0]

            if identifier == 'va': variables.append( component.variable(v) )    # Since we have two different types of parameters in CellML, I put them in different lists
            elif identifier == 'co': coefficients.append( component.variable(v) )
            elif identifier == 'rc': reaction_rate_constants.append( component.variable(v) )
            elif identifier == 'ra': reaction_rates.append( component.variable(v) )

    if not reaction_rates:

        print("Since there is no reaction rates defined separately for the CellML file, the equations cannot be generated by this Python code at this moment")
        exit()

    reaction_rate_equations=[]

    reaction_rate_equations_dict = {}

    for reaction_rate in reaction_rates:     # Now we will go through each reaction to write the reaction rate equation for it
        
        rate = symbols(reaction_rate.name())    # In CellML, a variable name is the name that the user has given to it like V, K and so on. So, we need to have them to write the similar equation as the user's one

        reaction_no = reaction_rate.id().split('_')[1]

        reaction_reactants = {}     # These two dictionaries will keep the reactants and products of this specific reaction mapped to their stoichiometric coefficients

        reaction_products = {}

        symbols_list = {}       # To write the equations in Sympy, all the variables must be converted to symbols of Sympy. This dictionary maps the variable to its Sympy symbol

        # At first, we need the reaction rate coefficients

        for rate_constant in reaction_rate_constants:

            id = rate_constant.id()

            if id.split('_')[2] == reaction_no:

                if rate_constant.id().split('_')[1] == 'f':
                    
                    forward_rate = symbols(rate_constant.name())
                    forward_rate_value = rate_constant.initialValue()
                    
                elif rate_constant.id().split('_')[1] == 'r':

                    reverse_rate = symbols(rate_constant.name())
                    reverse_rate_value = rate_constant.initialValue()

        # Now, we need the participants with their stoichiometric coefficients. Hence, we look for the stoichiometric coefficients which have the value, the participant that this coefficient belongs nad the reaction

        for c_item in coefficients:

            id = c_item.id() # id is like this: 'co_12345_1' => first characters show that it is coefficient, second shows which participant this coefficient belongd, the thirs shows the reaction this participant participates by this coefficient

            if id.split('_')[2] == reaction_no:     # First, we need to find the participants in the reaction, so we check the reaction number for each participant and select them

                ChEBI = id.split('_')[1]

                coefficient = c_item.name()

                value = c_item.initialValue()

                for v_item in variables:        # Now, we look for the variable correspondant to this stoichiometric coefficient and we get its name
                    
                    if v_item.id().split('_')[1].split('-')[0] == ChEBI:

                        variable = v_item.name()
                        break

                if int(value) < 0:      # When the value for the stoichiometric coefficient is negative, it is considered as reactant

                    reaction_reactants[variable] = abs(int(value))

                elif int(value) > 0:        # When the value for the stoichiometric coefficient is positive, it is considered as product

                    reaction_products[variable] = abs(int(value))

                elif int(value) == 0:
                    print("The stoichiometric coefficient for {c} is set to zero which is wrong".format( c = coefficient ))
                    exit()

                symbols_list[variable] = symbols(variable)
                symbols_list[coefficient] = symbols(coefficient)

        # Now, we will start writing the right hand side of the equation
        # First part of right hand side is the forward reaction
        rhs_f = forward_rate
        rhs_f = rhs_f.subs( forward_rate, forward_rate_value )  # Since we need the values for the known variables to solve the equation, we replace the values

        for item in reaction_reactants:

            rhs_f = rhs_f * ( symbols_list[item] ** reaction_reactants[item] )

        rhs_r = reverse_rate
        rhs_r = rhs_r.subs( reverse_rate, reverse_rate_value )

        for item in reaction_products:

            rhs_r = rhs_r * ( symbols_list[item] ** reaction_products[item] )

        reaction_rate_equations_dict[reaction_rate.name()] = rhs_f-rhs_r
        reaction_rate_equations.append(Eq(rate,rhs_f-rhs_r))

    #printer( reaction_rate_equations )






    

    # Here, I will write the concentration rate equations for the compounds in the reactions
    # Here, I need to check variables and write concentration rate for each

    concentration_rate_equations = []

    for v_item in variables:

        r_symbols = {}

        id = v_item.id()

        ChEBI = id.split('_')[1]    # Variable chebi code or name is the second in the id

        variable = v_item.name()

        r_symbols[variable] = symbols( variable )

        constituents = {}

        for c_item in coefficients:

            c_id = c_item.id()

            c_chebi = c_id.split('_')[1]

            if c_chebi == ChEBI:

                reaction_no = c_id.split('_')[2]

                reaction_rate_coefficient = c_item.name()

                r_symbols[ reaction_rate_coefficient ] = symbols( reaction_rate_coefficient )

                for r_item in reaction_rates:

                    if r_item.id().split('_')[1] == reaction_no:

                        reaction_rate = r_item.name()

                        r_symbols[ reaction_rate ] = symbols( reaction_rate )

                        break

                constituents[reaction_rate] = reaction_rate_coefficient


        t = symbols('t')

        x = Function(r_symbols[variable])(t)

        lhs = x.diff(t)

        rhs = Add()

        for item in constituents:

            rhs += r_symbols[item] * r_symbols[constituents[item]]

        concentration_rate_equations.append(Eq(lhs,rhs))

    #printer( concentration_rate_equations )

    return reaction_rate_equations_dict





def printer( equations ):

    print('\nRate equations for the reaction are as below:\n                \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\n')
    for equation in equations:

            print(equation.lhs, '=', equation.rhs)

    print("\n**********************************************************************")